WEBVTT

00:00:01.486 --> 00:00:06.546 align:middle
La clave detrás de cómo API Platform
convierte nuestros objetos en JSON...

00:00:06.656 --> 00:00:12.656 align:middle
y también cómo transforma JSON de nuevo
en objetos es el Serializador de Symfony.

00:00:13.346 --> 00:00:17.466 align:middle
symfony/serializer es un componente
independiente que puedes utilizar fuera

00:00:17.466 --> 00:00:20.246 align:middle
de API Platform y es increíble.

00:00:20.876 --> 00:00:24.366 align:middle
Le das cualquier entrada
-como un objeto u otra cosa-

00:00:24.656 --> 00:00:29.656 align:middle
y lo transforma en cualquier
formato, como JSON, XML o CSV.

00:00:29.656 --> 00:00:34.726 align:middle
Como puedes ver en este elegante
diagrama, sigue dos pasos.

00:00:35.116 --> 00:00:38.786 align:middle
Primero, toma tus datos y
los normaliza en una matriz.

00:00:38.866 --> 00:00:42.406 align:middle
En segundo lugar, los
codifica en el formato final.

00:00:42.406 --> 00:00:45.236 align:middle
También puede hacer lo mismo a la inversa.

00:00:45.646 --> 00:00:53.056 align:middle
Si partimos de JSON, como si enviáramos JSON a
nuestra API, primero lo descodifica en una matriz

00:00:53.346 --> 00:00:57.006 align:middle
y luego lo desnormaliza de nuevo en un objeto.

00:00:57.006 --> 00:01:03.226 align:middle
Para que todo esto ocurra, internamente
hay muchos objetos normalizadores distintos

00:01:03.316 --> 00:01:05.356 align:middle
que saben cómo trabajar con datos diferentes.

00:01:05.436 --> 00:01:12.456 align:middle
Por ejemplo, hay un DateTimeNormalizer que es
realmente bueno manejando objetos DateTime.

00:01:12.926 --> 00:01:18.266 align:middle
Compruébalo: nuestra entidad tiene un campo
createdAt, que es un objeto DateTime: Si te fijas

00:01:18.766 --> 00:01:22.546 align:middle
en nuestra API, cuando probamos la ruta GET,

00:01:22.876 --> 00:01:26.326 align:middle
ésta se devuelve como una
cadena especial de fecha y hora.

00:01:26.966 --> 00:01:30.836 align:middle
El DateTimeNormalizer es el responsable de hacerlo.

00:01:31.566 --> 00:01:35.556 align:middle
También hay otro normalizador muy
importante llamado ObjectNormalizer.

00:01:35.986 --> 00:01:41.926 align:middle
Su trabajo consiste en leer las propiedades
de un objeto para normalizarlas.

00:01:42.836 --> 00:01:47.016 align:middle
Para ello, utiliza otro componente
llamado property-access.

00:01:47.326 --> 00:01:49.226 align:middle
Ese componente es inteligente.

00:01:49.326 --> 00:01:55.576 align:middle
Por ejemplo, si miramos nuestra API, cuando
hacemos una petición GET a la ruta de recogida,

00:01:56.116 --> 00:01:58.506 align:middle
uno de los campos que devuelve es name.

00:01:59.226 --> 00:02:06.386 align:middle
Pero si miramos la clase, name es una propiedad
privada: Entonces, ¿cómo demonios se lee eso?

00:02:07.106 --> 00:02:09.906 align:middle
Ahí es donde entra en juego
el componente PropertyAccess.

00:02:10.386 --> 00:02:14.536 align:middle
Primero mira si la propiedad name es pública.

00:02:14.536 --> 00:02:18.626 align:middle
Y si no lo es, busca un método getName():

00:02:18.986 --> 00:02:22.356 align:middle
Así que eso es lo que se llama
realmente cuando se construye el JSON.

00:02:23.046 --> 00:02:28.576 align:middle
Lo mismo ocurre cuando enviamos JSON, como
para crear o actualizar un DragonTreasure.

00:02:29.176 --> 00:02:35.336 align:middle
PropertyAccess examina cada campo
del JSON y, si se puede establecer,

00:02:35.686 --> 00:02:42.326 align:middle
por ejemplo mediante un método setName(), lo
establece: Y, es incluso un poco más genial que eso:

00:02:43.036 --> 00:02:49.436 align:middle
¡Incluso buscará métodos getter o setter que
no se correspondan con ninguna propiedad real!

00:02:49.886 --> 00:02:52.976 align:middle
Puedes utilizar esto para
crear campos "extra" en tu API

00:02:53.486 --> 00:02:56.156 align:middle
que no existan como propiedades en tu clase.

00:02:56.886 --> 00:02:57.666 align:middle
¡Vamos a probarlo!

00:02:58.236 --> 00:03:00.986 align:middle
Imagina que, cuando estamos
creando o editando un tesoro,

00:03:01.386 --> 00:03:04.636 align:middle
en lugar de enviar un campo
description, queremos poder

00:03:04.636 --> 00:03:08.786 align:middle
enviar un campo textDescription
que contenga texto sin formato...

00:03:08.966 --> 00:03:10.376 align:middle
pero con saltos de línea.

00:03:10.746 --> 00:03:16.596 align:middle
Luego, en nuestro código, transformaremos esos
saltos de línea en etiquetas HTML <br>.

00:03:17.186 --> 00:03:18.196 align:middle
Te mostraré lo que quiero decir.

00:03:18.656 --> 00:03:20.486 align:middle
Copia el método setDescription().

00:03:20.886 --> 00:03:25.616 align:middle
Luego, debajo, pega y llama a este
nuevo método setTextDescription().

00:03:26.256 --> 00:03:28.786 align:middle
Básicamente va a establecer
la propiedad description...

00:03:28.986 --> 00:03:32.226 align:middle
pero antes llama a nl2br().

00:03:32.846 --> 00:03:36.886 align:middle
Esa función transforma literalmente las
nuevas líneas en etiquetas <br>.

00:03:37.266 --> 00:03:43.696 align:middle
Si llevas por aquí tanto tiempo como yo, recordarás
cuando nl2br era superguay: De todos modos,

00:03:43.806 --> 00:03:49.266 align:middle
sólo con ese cambio, actualiza la
documentación y abre las rutas POST o PUT.

00:03:49.796 --> 00:03:53.316 align:middle
Y.. ¡Tenemos un nuevo campo
llamado textDescription !

00:03:53.756 --> 00:03:58.996 align:middle
¡Sí! El serializador ha visto el método
setTextDescription() y ha determinado

00:03:58.996 --> 00:04:02.496 align:middle
que textDescription es una
propiedad virtual "definible "

00:04:03.316 --> 00:04:06.606 align:middle
Sin embargo, no lo vemos en la ruta GET.

00:04:07.176 --> 00:04:08.826 align:middle
¡Y eso es perfecto!

00:04:09.226 --> 00:04:14.116 align:middle
No existe el método getTextDescription(),
por lo que aquí no habrá un nuevo c ampo.

00:04:14.436 --> 00:04:17.216 align:middle
El nuevo campo es escribible, pero no legible.

00:04:17.976 --> 00:04:19.556 align:middle
Vamos a probar esta ruta

00:04:19.666 --> 00:04:23.746 align:middle
Primero... Tengo que ejecutar
la ruta de recolección GET

00:04:23.926 --> 00:04:26.486 align:middle
para ver qué identificadores
tenemos en la base de datos.

00:04:27.106 --> 00:04:29.736 align:middle
Perfecto: tengo un Tesoro con ID 1.

00:04:30.576 --> 00:04:31.276 align:middle
Cierra esto.

00:04:31.936 --> 00:04:35.296 align:middle
Vamos a probar la ruta PUT para
hacer nuestra primera actualización.

00:04:36.336 --> 00:04:39.816 align:middle
Cuando utilizas la ruta PUT, no
necesitas enviar todos los campos:

00:04:40.016 --> 00:04:42.026 align:middle
sólo los campos que quieras cambiar.

00:04:42.676 --> 00:04:44.056 align:middle
Pasa textDescription...

00:04:44.416 --> 00:04:49.076 align:middle
e incluiré \n para representar
algunas líneas nuevas en JSON.

00:04:50.586 --> 00:04:54.136 align:middle
Cuando lo probemos, ¡sí!

00:04:54.336 --> 00:04:55.766 align:middle
código de estado 200.

00:04:56.206 --> 00:05:00.336 align:middle
Y fíjate: ¡el campo description
tiene esas etiquetas <br>!

00:05:01.066 --> 00:05:04.146 align:middle
Vale, ahora que tenemos setTextDescription()...

00:05:04.576 --> 00:05:07.846 align:middle
quizá sea la única forma en que queremos
permitir que se establezca ese campo.

00:05:08.626 --> 00:05:12.546 align:middle
Para imponerlo, elimina el
método setDescription().

00:05:14.116 --> 00:05:15.146 align:middle
Ahora, cuando actualicemos...

00:05:15.556 --> 00:05:19.216 align:middle
y miramos la ruta PUT, ¡todavía
tenemos textDescription,

00:05:19.756 --> 00:05:22.226 align:middle
pero el campo description ha desaparecido!

00:05:22.926 --> 00:05:28.186 align:middle
El serializador se ha dado cuenta de que ya no
es configurable y lo ha eliminado de nuestra API.

00:05:29.006 --> 00:05:31.516 align:middle
Seguiría siendo devuelto porque es algo que

00:05:31.516 --> 00:05:34.276 align:middle
podemos leer, pero ya no es escribible.

00:05:35.106 --> 00:05:37.086 align:middle
Todo esto es realmente genial.

00:05:37.446 --> 00:05:43.826 align:middle
Simplemente nos preocupamos de escribir nuestra clase
como queremos y luego API Platform construye nuestra

00:05:43.826 --> 00:05:45.386 align:middle
API en consecuencia.

00:05:46.216 --> 00:05:47.216 align:middle
Vale, ¿qué más?

00:05:47.636 --> 00:05:51.366 align:middle
Bueno, es un poco raro que podamos
establecer el campo createdAt:

00:05:51.846 --> 00:05:55.066 align:middle
que normalmente se establece
interna y automáticamente.

00:05:55.506 --> 00:05:56.236 align:middle
Vamos a arreglarlo.

00:05:56.986 --> 00:05:58.026 align:middle
Pero, ¿sabes qué?

00:05:58.026 --> 00:06:00.346 align:middle
Quería llamar a este campo plunderedAt.

00:06:00.886 --> 00:06:03.286 align:middle
Refactorizaré y cambiaré
el nombre de esa propiedad...

00:06:03.686 --> 00:06:07.626 align:middle
y dejaré que PhpStorm renombre
también mis métodos getter y setter.

00:06:08.066 --> 00:06:12.336 align:middle
¡Genial! Esto también hará que
cambie la columna de mi base de datos...

00:06:12.746 --> 00:06:19.586 align:middle
así que gira a tu consola y ejecuta: symfony
console make:migration Viviré peligrosamente

00:06:19.586 --> 00:06:25.436 align:middle
y lo ejecutaré inmediatamente: symfony
console doctrine:migrations:migrate ¡Listo!

00:06:25.436 --> 00:06:28.156 align:middle
Gracias a ese cambio de nombre...

00:06:28.506 --> 00:06:33.206 align:middle
en la API, excelente: el
campo es ahora plunderedAt.

00:06:34.146 --> 00:06:39.086 align:middle
Vale, olvídate de la API por un momento:
vamos a hacer un poco de limpieza. La

00:06:39.716 --> 00:06:42.956 align:middle
finalidad de este campo plunderedAt es que se

00:06:42.956 --> 00:06:47.496 align:middle
establezca automáticamente cada vez que
creemos un nuevo DragonTreasure. Para ello

00:06:48.336 --> 00:06:53.176 align:middle
, crea un public function
__construct() y, dentro,

00:06:53.516 --> 00:06:57.436 align:middle
pon this->plunderedAt
= new DateTimeImmutable().

00:06:58.516 --> 00:07:01.156 align:middle
Y ahora no necesitamos el
= null en la propiedad.

00:07:01.686 --> 00:07:06.426 align:middle
Y si buscamos setPlunderedAt,
¡ya no necesitamos ese método!

00:07:07.006 --> 00:07:07.676 align:middle
¡Elimínalo!

00:07:09.276 --> 00:07:13.736 align:middle
Esto significa ahora que la propiedad
plunderedAt es legible pero no escribible.

00:07:14.156 --> 00:07:21.626 align:middle
Así que, no te sorprendas, cuando actualizamos y
abrimos la ruta PUT o POST, plunderedAt está ausente.

00:07:22.396 --> 00:07:24.136 align:middle
Pero si miramos el aspecto
que tendría el modelo

00:07:24.136 --> 00:07:28.326 align:middle
si buscáramos un tesoro,
plunderedAt sigue ahí.

00:07:29.446 --> 00:07:31.226 align:middle
Muy bien, ¡un objetivo más! Vamos a

00:07:31.516 --> 00:07:37.566 align:middle
añadir un campo virtual llamado plunderedAtAgo
que devuelva una versión legible por humanos

00:07:37.566 --> 00:07:40.326 align:middle
de la fecha, como "hace dos meses".

00:07:41.286 --> 00:07:43.516 align:middle
Para ello, tenemos que
instalar un nuevo paquete:

00:07:43.876 --> 00:07:50.016 align:middle
composer require nesbot/carbon
Una vez que esto termine...

00:07:50.426 --> 00:07:56.816 align:middle
encuentra el método getPlunderedAt(),
cópialo, pégalo debajo, devolverá

00:07:56.946 --> 00:08:01.956 align:middle
un string y llámalo
getPlunderedAtAgo(). Dentro,

00:08:03.336 --> 00:08:03.956 align:middle
devuelve

00:08:04.166 --> 00:08:08.226 align:middle
Carbon::instance($this->getPlunderedAt()))

00:08:08.516 --> 00:08:11.086 align:middle
y luego ->diffForHumans().

00:08:11.176 --> 00:08:17.096 align:middle
Así que, como ahora entendemos, no
existe la propiedad plunderedAtAgo...

00:08:17.436 --> 00:08:22.536 align:middle
pero el serializer debería ver esto como
legible a través de su getter y exponerlo.

00:08:22.956 --> 00:08:25.796 align:middle
Ah, y ya que estoy aquí,
añadiré un poco de documentación

00:08:25.796 --> 00:08:28.426 align:middle
arriba para describir el significado del campo.

00:08:30.206 --> 00:08:32.146 align:middle
Bien, probemos esto.

00:08:32.966 --> 00:08:39.176 align:middle
En cuanto actualizamos y abrimos una ruta
GET, ¡vemos el nuevo campo en el ejemplo!

00:08:40.676 --> 00:08:44.966 align:middle
También podemos ver los campos que
recibiremos abajo, en la sección Esquemas.

00:08:46.636 --> 00:08:50.736 align:middle
Volvamos atrás, probemos
la ruta GET con el ID one.

00:08:51.816 --> 00:08:54.936 align:middle
Y... ¿a que mola?

00:08:55.876 --> 00:09:00.116 align:middle
A continuación: ¿qué pasa si queremos tener
ciertos métodos getter o setter en nuestra clase,

00:09:00.386 --> 00:09:04.466 align:middle
como setDescription(), pero no queremos
que formen parte de nuestra API?

00:09:05.236 --> 00:09:07.916 align:middle
La respuesta: grupos de serialización.
