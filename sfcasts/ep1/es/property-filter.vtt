WEBVTT

00:00:00.036 --> 00:00:05.406 align:middle
Como a los dragones les encantan los tesoros
caros, añadamos una forma de que puedan filtrar en

00:00:05.406 --> 00:00:08.016 align:middle
función del valor, como dentro de un rango.

00:00:08.596 --> 00:00:10.966 align:middle
Hay un filtro incorporado
para eso llamado RangeFilter.

00:00:11.026 --> 00:00:16.406 align:middle
Busca la propiedad $value y, como
hicimos antes, utiliza #[ApiFilter()]

00:00:16.596 --> 00:00:20.996 align:middle
y dentro de RangeFilter (la del ORM) ::class:

00:00:21.946 --> 00:00:24.536 align:middle
Éste no necesita ninguna
otra opción, así que...

00:00:24.826 --> 00:00:25.446 align:middle
¡hemos terminado!

00:00:25.956 --> 00:00:26.936 align:middle
Joder... ha sido fácil.

00:00:27.506 --> 00:00:28.676 align:middle
Cuando actualicemos...

00:00:28.936 --> 00:00:30.926 align:middle
lo abrimos y le damos a "Probar"....

00:00:31.126 --> 00:00:32.466 align:middle
¡Mira esto!

00:00:32.836 --> 00:00:38.416 align:middle
Tenemos un montón de filtros nuevos:
value[between], value[gt] (o "mayor que"),

00:00:38.776 --> 00:00:43.496 align:middle
value[gte], etc. Probemos value[gt]...

00:00:43.496 --> 00:00:44.826 align:middle
con un número aleatorio...

00:00:44.826 --> 00:00:46.426 align:middle
tal vez 500000.

00:00:47.446 --> 00:00:48.476 align:middle
Cuando hagamos clic en "Ejecutar"...

00:00:49.976 --> 00:00:52.226 align:middle
¡sí! Se actualiza la URL aquí.

00:00:52.616 --> 00:00:58.196 align:middle
No es... la URL más bonita del mundo -debido a la
codificación-, pero funciona a las mil maravillas.

00:00:58.806 --> 00:01:00.196 align:middle
Y abajo en los resultados...

00:01:00.526 --> 00:01:03.936 align:middle
¡aparentemente hay 18 tesoros
que valen más que eso!

00:01:04.716 --> 00:01:06.576 align:middle
El último filtro que quiero mostrarte...

00:01:06.816 --> 00:01:08.596 align:middle
no es realmente un filtro.

00:01:08.826 --> 00:01:13.926 align:middle
Es una forma de que nuestros clientes de la API
elijan qué campos quieren que se les devuelvan...

00:01:14.116 --> 00:01:15.876 align:middle
en lugar de qué resultados.

00:01:16.746 --> 00:01:19.466 align:middle
Para mostrarlo, busca el
método getDescription().

00:01:19.936 --> 00:01:24.506 align:middle
Imagina que queremos devolver una versión más
corta y truncada de la descripción. Para ello

00:01:25.076 --> 00:01:28.806 align:middle
, copia el método getDescription(),
pégalo a continuación

00:01:29.066 --> 00:01:33.896 align:middle
y cámbiale el nombre a
getShortDescription(): Para truncarlo,

00:01:34.046 --> 00:01:36.556 align:middle
podemos utilizar la función u() de Symfony.

00:01:36.856 --> 00:01:40.306 align:middle
Escribe u y asegúrate de pulsar
"tab" para autocompletarlo.

00:01:41.016 --> 00:01:43.526 align:middle
Esta es una función rara que nos da Symfony...

00:01:43.736 --> 00:01:50.106 align:middle
y al pulsar "tabulador" se añadió una declaración
use para ella: Esto crea un objeto con todo tipo

00:01:50.106 --> 00:01:53.636 align:middle
de cosas relacionadas con las
cadenas, incluyendo truncate().

00:01:54.306 --> 00:01:58.496 align:middle
Pasa 40 para truncar en 40
caracteres seguidos de ....

00:01:59.216 --> 00:02:00.576 align:middle
¡Método terminado!

00:02:01.326 --> 00:02:08.526 align:middle
Para exponer esto a nuestra API, arriba, añade
el atributo Groups con treasure:read: ¡Hermoso!

00:02:09.106 --> 00:02:12.096 align:middle
Bien, vuelve a la
documentación y actualízala.

00:02:13.106 --> 00:02:19.006 align:middle
Abre la ruta GET, pulsa
"Probar", "Ejecutar" y...

00:02:19.676 --> 00:02:22.556 align:middle
estupendo. ¡Aquí está
nuestra descripción truncada!

00:02:23.216 --> 00:02:30.026 align:middle
Aunque... es raro que ahora devolvamos
dos descripciones: una corta y la normal.

00:02:30.516 --> 00:02:34.786 align:middle
Si nuestro cliente de la API quiere la
descripción corta, puede que no quiera

00:02:34.786 --> 00:02:37.866 align:middle
que le devolvamos también
la descripción completa...

00:02:37.936 --> 00:02:39.636 align:middle
por motivos de ancho de banda.

00:02:40.396 --> 00:02:41.496 align:middle
¿Qué podemos hacer?

00:02:42.136 --> 00:02:44.376 align:middle
Presentamos: ¡el PropertyFilter!

00:02:45.006 --> 00:02:46.526 align:middle
Vuelve a DragonTreasure.

00:02:47.246 --> 00:02:51.286 align:middle
A diferencia de los otros, este
filtro debe ir por encima de la clase.

00:02:51.556 --> 00:02:57.066 align:middle
Así que aquí, digamos ApiFilter, y
luego PropertyFilter (en este caso,

00:02:57.066 --> 00:02:59.556 align:middle
sólo hay uno) ::class.

00:03:00.286 --> 00:03:04.456 align:middle
Hay algunas opciones que puedes pasar a esto
-que puedes encontrar en los documentos-,

00:03:04.576 --> 00:03:07.536 align:middle
pero no necesitamos ninguna
de ellas: Entonces...

00:03:07.536 --> 00:03:09.356 align:middle
¿qué hace eso?

00:03:09.906 --> 00:03:12.216 align:middle
Vuelve atrás, actualiza la
documentación, abre la ruta

00:03:12.536 --> 00:03:15.806 align:middle
de recolección GET y pulsa "Probar".

00:03:17.006 --> 00:03:24.076 align:middle
¡Woh! Ahora vemos una caja properties[]
y podemos añadirle elementos.

00:03:24.486 --> 00:03:25.166 align:middle
¡Vamos a probarlo!

00:03:25.386 --> 00:03:28.806 align:middle
Añade una nueva cadena llamada
name y otra llamada description.

00:03:30.246 --> 00:03:31.176 align:middle
Momento de la verdad.

00:03:31.506 --> 00:03:34.286 align:middle
Pulsa "Ejecutar", y...

00:03:34.606 --> 00:03:35.496 align:middle
¡ahí está!

00:03:35.876 --> 00:03:38.576 align:middle
Las ha introducido en la URL de forma normal.

00:03:39.016 --> 00:03:43.546 align:middle
Pero mira la respuesta: sólo contiene
los campos name y description.

00:03:43.746 --> 00:03:50.186 align:middle
Bueno... también contiene los campos JSON-LD,
pero los datos reales son sólo esos dos campos.

00:03:50.226 --> 00:03:55.236 align:middle
Si elimináramos las cadenas properties,
obtendríamos la respuesta normal y completa.

00:03:55.716 --> 00:03:58.696 align:middle
Así que, por defecto,
obtienes todos los campos.

00:03:58.956 --> 00:04:02.206 align:middle
Pero ahora los usuarios pueden
elegir menos campos si lo desean.

00:04:02.756 --> 00:04:04.626 align:middle
Todo esto funciona bastante bien.

00:04:04.936 --> 00:04:08.896 align:middle
Pero si echas un vistazo a la documentación
de la API Platform para PropertyFilter,

00:04:09.176 --> 00:04:13.806 align:middle
en realidad recomiendan una solución
diferente: algo llamado "Vulcain".

00:04:14.276 --> 00:04:16.236 align:middle
No, no es el planeta natal de Spock.

00:04:16.506 --> 00:04:20.456 align:middle
Estamos hablando de un protocolo que
añade funciones a tu servidor web.

00:04:20.986 --> 00:04:23.206 align:middle
Fue creado por el equipo de API Platform,

00:04:23.606 --> 00:04:26.836 align:middle
y si nos desplazamos un poco hacia
abajo, tienen un ejemplo realmente bueno.

00:04:27.596 --> 00:04:29.396 align:middle
Imagina que tenemos la siguiente API.

00:04:30.076 --> 00:04:34.366 align:middle
Si hacemos una petición a /books,
obtendremos de vuelta estos dos libros.

00:04:34.656 --> 00:04:36.166 align:middle
Bastante sencillo. Si queremos

00:04:36.216 --> 00:04:39.796 align:middle
obtener más información sobre el
primer libro, hacemos una petición a

00:04:39.946 --> 00:04:44.446 align:middle
esa URL: /books/1.

00:04:44.876 --> 00:04:46.326 align:middle
¡Estupendo! Pero...

00:04:46.326 --> 00:04:52.346 align:middle
ahora queremos información sobre el autor, así
que hacemos una petición a /authors/1 . Así que

00:04:52.436 --> 00:04:58.416 align:middle
, para obtener toda la información sobre
el libro y sobre el autor, al final tuvimos

00:04:58.416 --> 00:05:02.626 align:middle
que hacer cuatro peticiones:
la original y 3 más.

00:05:03.146 --> 00:05:05.276 align:middle
Eso no es bueno para el rendimiento.

00:05:05.866 --> 00:05:09.866 align:middle
Lo que Vulcain te permite hacer es
realizar esta primera petición...

00:05:10.026 --> 00:05:15.426 align:middle
pero diciéndole al servidor que te
envíe los datos de las otras peticiones.

00:05:16.016 --> 00:05:19.946 align:middle
Podemos ver esto mejor en JavaScript,
y hay un pequeño ejemplo aquí abajo.

00:05:20.606 --> 00:05:27.006 align:middle
En este caso, imagina que estamos haciendo
una petición a /books/1 pero sabemos

00:05:27.006 --> 00:05:29.426 align:middle
que también necesitamos
la información del autor.

00:05:29.816 --> 00:05:34.526 align:middle
Así que, cuando hacemos la petición,
incluimos una cabecera especial Preload.

00:05:34.836 --> 00:05:36.576 align:middle
Esto le dice al servidor: ¡Eh!

00:05:36.636 --> 00:05:40.796 align:middle
Después de devolver los datos del
libro, utiliza un push del servidor

00:05:40.946 --> 00:05:45.296 align:middle
para enviarme la información
encontrada siguiendo el IRI author.

00:05:46.376 --> 00:05:50.236 align:middle
Lo realmente genial es que tu
JavaScript no cambia realmente.

00:05:50.606 --> 00:05:56.036 align:middle
Sigues utilizando fetch() para hacer una
segunda petición a la URL bookJSON.author...

00:05:56.516 --> 00:06:01.246 align:middle
sólo que ésta volverá instantáneamente
porque el navegador ya tiene los datos.

00:06:02.246 --> 00:06:04.376 align:middle
No voy a entrar en todos los detalles,

00:06:04.456 --> 00:06:11.226 align:middle
pero el Preload del primer ejemplo es
aún más impresionante: /member/*/author.

00:06:11.516 --> 00:06:18.136 align:middle
Eso le dice al servidor que envíe todos los datos como si
también hubiéramos solicitado cada una de las claves member

00:06:18.456 --> 00:06:21.836 align:middle
-por tanto, todos los libros-
y las URL de sus autores. La

00:06:22.536 --> 00:06:27.986 align:middle
cuestión es: si utilizas Vulcain, los usuarios
de tu API pueden hacer pequeños cambios

00:06:27.986 --> 00:06:30.406 align:middle
para disfrutar de enormes
ventajas de rendimiento...

00:06:30.496 --> 00:06:33.606 align:middle
sin necesidad de añadir un
montón de fantasía a nuestra API.

00:06:34.746 --> 00:06:37.256 align:middle
A continuación: Hablemos de formatos.

00:06:37.606 --> 00:06:45.886 align:middle
Sabemos que nuestra API puede devolver representaciones
JSON-LD, JSON e incluso HTML de nuestros recursos. Vamos a

00:06:46.466 --> 00:06:50.396 align:middle
añadir dos nuevos formatos,
incluido un formato CSV,

00:06:50.396 --> 00:06:54.716 align:middle
que será la función de exportación
CSV más rápida que jamás hayas creado.
