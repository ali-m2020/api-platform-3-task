WEBVTT

00:00:02.126 --> 00:00:06.336 align:middle
Ahora mismo, que un campo de
nuestra clase sea legible o no

00:00:06.376 --> 00:00:12.196 align:middle
en la API está totalmente determinado
por si esa propiedad es legible o no

00:00:12.226 --> 00:00:17.416 align:middle
en nuestra clase (básicamente, si
tiene o no un método getter o setter).

00:00:17.686 --> 00:00:19.916 align:middle
Pero, ¿y si necesitas un getter o setter...

00:00:20.216 --> 00:00:23.366 align:middle
pero no quieres que ese campo
esté expuesto en la API?

00:00:23.666 --> 00:00:26.896 align:middle
Para eso, tenemos dos opciones.

00:00:27.426 --> 00:00:32.306 align:middle
Opción número uno: crear una
clase DTO para el recurso API.

00:00:32.776 --> 00:00:34.946 align:middle
Esto lo dejaremos para otro día...

00:00:35.206 --> 00:00:36.386 align:middle
en un futuro tutorial.

00:00:36.746 --> 00:00:42.726 align:middle
Pero, en pocas palabras, consiste en crear una
clase dedicada para tu API DragonTreasure...

00:00:42.816 --> 00:00:46.706 align:middle
y luego le pasas el atributo ApiResource.

00:00:47.626 --> 00:00:53.196 align:middle
La clave es que diseñes la nueva clase
para que se parezca exactamente a tu API...

00:00:53.796 --> 00:00:57.496 align:middle
porque modelar tu API será su único trabajo.

00:00:58.046 --> 00:01:02.116 align:middle
Lleva un poco más de trabajo
configurar las cosas, pero la ventaja es

00:01:02.116 --> 00:01:05.446 align:middle
que entonces tendrás una
clase dedicada a tu API.

00:01:06.236 --> 00:01:13.196 align:middle
¡Listo! La segunda solución, y la que vamos
a utilizar, son los grupos de serialización.

00:01:13.196 --> 00:01:13.706 align:middle
Compruébalo.

00:01:13.916 --> 00:01:19.066 align:middle
Sobre el atributo ApiResource, añade una
nueva opción llamada normalizationContext.

00:01:19.966 --> 00:01:26.336 align:middle
Si recuerdas, la "normalización" es el
proceso de pasar de un objeto a una matriz,

00:01:26.706 --> 00:01:30.356 align:middle
como cuando haces una petición
a GET para leer un tesoro.

00:01:30.946 --> 00:01:34.706 align:middle
El normalizationContext son
básicamente opciones que se pasan

00:01:34.706 --> 00:01:37.146 align:middle
al serializador durante ese proceso.

00:01:37.476 --> 00:01:40.816 align:middle
Y la opción más importante es groups.

00:01:41.116 --> 00:01:45.906 align:middle
Establécela en un grupo llamado treasure:read:
Hablaremos de lo que hace esto en un minuto.

00:01:46.116 --> 00:01:48.266 align:middle
Pero puedes ver el patrón que
estoy utilizando para el grupo:

00:01:48.546 --> 00:01:54.446 align:middle
el nombre de la clase (podría ser
dragon_treasure si quisiéramos) luego :read...

00:01:54.896 --> 00:01:58.436 align:middle
porque la normalización significa
que estamos leyendo esta clase.

00:01:59.186 --> 00:02:02.696 align:middle
Puedes nombrar estos grupos como
quieras: éste es mi patrón.

00:02:03.276 --> 00:02:05.456 align:middle
Entonces... ¿qué hace eso?

00:02:05.946 --> 00:02:06.586 align:middle
¡Averigüémoslo!

00:02:07.126 --> 00:02:08.576 align:middle
Actualiza la documentación...

00:02:09.196 --> 00:02:15.556 align:middle
y, para hacerte la vida más fácil, ve
a la URL: /api/dragon_treasures.jsonld.

00:02:16.516 --> 00:02:19.406 align:middle
¡Vaya! Ahora sólo está treasures.jsonld.

00:02:20.616 --> 00:02:21.186 align:middle
Ya está.

00:02:21.916 --> 00:02:24.736 align:middle
Y... ¡no se devuelve absolutamente nada!

00:02:25.426 --> 00:02:31.306 align:middle
Vale, tenemos los campos hidra, pero este
hydra:member contiene la matriz de tesoros.

00:02:31.686 --> 00:02:33.696 align:middle
Nos devuelve un tesoro...

00:02:34.066 --> 00:02:36.596 align:middle
pero aparte de @id y @type...

00:02:36.916 --> 00:02:39.276 align:middle
¡no hay campos reales!

00:02:39.946 --> 00:02:41.036 align:middle
Esto es lo que pasa. En cuanto

00:02:41.496 --> 00:02:47.076 align:middle
añadamos un normalizationContext con un
grupo, cuando se normalice nuestro objeto,

00:02:47.356 --> 00:02:52.106 align:middle
el serializador sólo incluirá las
propiedades que tengan ese grupo.

00:02:52.616 --> 00:02:57.846 align:middle
Y como no hemos añadido ningún grupo a
nuestras propiedades, no devuelve nada.

00:02:58.476 --> 00:02:59.746 align:middle
¿Cómo añadimos grupos?

00:03:00.146 --> 00:03:01.836 align:middle
¡Con otro atributo! Encima de

00:03:02.616 --> 00:03:05.266 align:middle
la propiedad $name, digamos #[Groups],

00:03:05.476 --> 00:03:09.316 align:middle
pulsa "tab" para añadir su
declaración use y luego treasure:read.

00:03:09.316 --> 00:03:13.136 align:middle
Repite esto encima del campo $description...

00:03:13.486 --> 00:03:15.196 align:middle
porque queremos que sea legible...

00:03:15.756 --> 00:03:17.506 align:middle
y luego el campo $value...

00:03:17.756 --> 00:03:21.716 align:middle
y finalmente $coolFactor: Buen comienzo.

00:03:21.716 --> 00:03:23.706 align:middle
Muévete y actualiza la ruta.

00:03:24.116 --> 00:03:25.836 align:middle
Ahora... ¡ya está!

00:03:26.176 --> 00:03:29.466 align:middle
Vemos name, description, value, y coolFactor.

00:03:29.976 --> 00:03:33.446 align:middle
Ahora tenemos control sobre
qué campos son legibles...

00:03:33.856 --> 00:03:38.376 align:middle
y podemos hacer lo mismo para elegir
qué campos se pueden escribir en la API.

00:03:38.846 --> 00:03:44.236 align:middle
Eso se llama "desnormalización", y apuesto
a que adivinas lo que vamos a hacer.

00:03:44.656 --> 00:03:49.746 align:middle
Copia normalizationContext, pégalo,
cámbialo por denormalizationContext...

00:03:49.906 --> 00:03:56.346 align:middle
y utiliza treasure:write: Ahora dirígete a la
propiedad $name y añade treasure:write. Voy a

00:03:57.866 --> 00:03:59.906 align:middle
saltarme $description (recuerda

00:03:59.906 --> 00:04:03.826 align:middle
que antes borramos nuestro método
setDescription() a propósito)...

00:04:04.146 --> 00:04:05.496 align:middle
pero añade esto a $value...

00:04:05.836 --> 00:04:09.646 align:middle
y $coolFactor: ¡Oh, está enfadado conmigo!

00:04:10.156 --> 00:04:14.006 align:middle
En cuanto pasemos varios grupos,
tenemos que convertirlo en un array.

00:04:14.636 --> 00:04:19.206 align:middle
Añade algo de [] alrededor
de esas tres propiedades.

00:04:20.926 --> 00:04:22.186 align:middle
Mucho más contento.

00:04:23.646 --> 00:04:27.566 align:middle
Para comprobar si esto es A-OK,
refresca la documentación...

00:04:27.766 --> 00:04:29.986 align:middle
abre la ruta PUT y...

00:04:30.456 --> 00:04:34.256 align:middle
¡genial! Vemos name, value, y coolFactor,

00:04:34.546 --> 00:04:38.176 align:middle
que son actualmente los únicos campos
que se pueden escribir en nuestra API.

00:04:39.166 --> 00:04:41.036 align:middle
Sin embargo, nos faltan algunas cosas.

00:04:41.606 --> 00:04:45.236 align:middle
Antes hicimos un método getPlunderedAtAgo()...

00:04:45.516 --> 00:04:48.966 align:middle
y queremos que se incluya
cuando leamos nuestro recurso.

00:04:49.426 --> 00:04:52.876 align:middle
Ahora mismo, si comprobamos
la ruta, no está ahí.

00:04:53.726 --> 00:04:57.416 align:middle
Para solucionarlo, también podemos
añadir grupos a los métodos anteriores.

00:04:57.896 --> 00:05:03.596 align:middle
Digamos #[Groups(['treasure:read'])]:
Y cuando vayamos a c omprobarlo...

00:05:04.056 --> 00:05:06.066 align:middle
voilà, aparece.

00:05:06.896 --> 00:05:09.716 align:middle
Busquemos también el método
setTextDescription()...

00:05:10.096 --> 00:05:14.896 align:middle
y hagamos lo mismo:
#[Groups([treasure:write])]: ¡Genial!

00:05:15.396 --> 00:05:19.016 align:middle
Si volvemos a la documentación,
el campo no aparece...

00:05:19.466 --> 00:05:20.856 align:middle
pero cuando actualizamos...

00:05:21.196 --> 00:05:23.666 align:middle
y comprobamos de nuevo la ruta PUT...

00:05:24.086 --> 00:05:26.346 align:middle
textDescription ¡ha vuelto!

00:05:26.946 --> 00:05:32.176 align:middle
Oye, ¡ahora podemos volver a añadir cualquiera de
los métodos getter o setter que eliminamos antes!

00:05:32.506 --> 00:05:36.566 align:middle
Por ejemplo, quizá sí necesite un método
setDescription() en mi código para algo.

00:05:37.206 --> 00:05:42.896 align:middle
Copia setName() para dar pereza, pega y cambia
"nombre" por "descripción" en algunos sitios.

00:05:45.316 --> 00:05:48.506 align:middle
¡Ya está! Y aunque hemos
recuperado ese definidor,

00:05:48.626 --> 00:05:52.326 align:middle
cuando mir amos la ruta
PUT, description no aparece.

00:05:52.846 --> 00:05:57.856 align:middle
Tenemos un control total sobre nuestros campos
gracias a los grupos de desnormalización.

00:05:58.256 --> 00:06:00.676 align:middle
Haz lo mismo para setPlunderedAt()...

00:06:00.936 --> 00:06:07.676 align:middle
porque a veces es útil -especialmente en las
fijaciones de datos- poder establecer esto manualmente.

00:06:10.676 --> 00:06:11.916 align:middle
Y... ¡listo!

00:06:12.636 --> 00:06:15.086 align:middle
Ya sabemos que obtener un recurso funciona.

00:06:15.496 --> 00:06:18.126 align:middle
Ahora veamos si podemos crear un nuevo recurso.

00:06:18.806 --> 00:06:22.186 align:middle
Haz clic en la ruta POST,
pulsa "Probar", y... vamos a

00:06:22.186 --> 00:06:29.096 align:middle
rellenar algo de información sobre nuestro nuevo
tesoro, que es, por supuesto, un Giant jar of pickles.

00:06:29.846 --> 00:06:34.096 align:middle
Éste es muy valioso y
tiene un coolFactor de 10.

00:06:34.726 --> 00:06:36.386 align:middle
También añadiré una descripción...

00:06:36.576 --> 00:06:40.266 align:middle
aunque este tarro de
pepinillos habla por sí solo.

00:06:40.366 --> 00:06:41.556 align:middle
Cuando probemos esto...

00:06:42.216 --> 00:06:42.826 align:middle
vaya...

00:06:43.106 --> 00:06:49.426 align:middle
obtenemos un error 500: Se ha producido una excepción
al ejecutar una consulta: Violación no nula,

00:06:49.626 --> 00:06:52.116 align:middle
valornull en la columna isPublished.

00:06:52.776 --> 00:06:57.286 align:middle
Hemos reducido nuestra API a sólo los
campos que queremos que se puedan escribir...

00:06:57.496 --> 00:07:00.636 align:middle
pero aún queda una propiedad que
debe establecerse en la base de datos.

00:07:01.116 --> 00:07:03.016 align:middle
Desplázate hacia arriba y busca isPublished.

00:07:04.426 --> 00:07:06.986 align:middle
Sí, actualmente está por defecto en null.

00:07:07.476 --> 00:07:09.416 align:middle
Cámbialo a = false...

00:07:09.756 --> 00:07:12.366 align:middle
y ahora la propiedad nunca será null.

00:07:12.366 --> 00:07:15.346 align:middle
Si lo intentamos...

00:07:15.346 --> 00:07:18.896 align:middle
¡el Giant jar of pickles se
almacena en la base de datos!

00:07:19.226 --> 00:07:25.196 align:middle
¡Funciona! A continuación: vamos a explorar
algunos trucos más de serialización

00:07:25.286 --> 00:07:27.256 align:middle
para tener aún más control.
